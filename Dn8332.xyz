local ffi = require("ffi")
local bit = require("bit")
local vmt_hook = require("neverlose/vmt_hook")
local clipboard = require("neverlose/clipboard")
local screen_size = render.screen_size()
local pixel = render.load_font("Smallest Pixel-7", 10, "o")

ffi.cdef [[
    typedef uintptr_t (__thiscall* GetClientEntity_4242425_t)(void*, int);
]]

local entity_list_pointer = ffi.cast("void***", utils.create_interface("client.dll", "VClientEntityList003"))
local get_client_entity_fn = ffi.cast("GetClientEntity_4242425_t", entity_list_pointer[0][3])
local get_entity_address = function(ent_index)
    local addr = get_client_entity_fn(entity_list_pointer, ent_index)
    return addr
end

local vars = {
    p_states = { 'Global', 'Standing', 'Moving', 'Crouching', 'Slowwalk', 'Air', 'Air duck', 'Legit aa' },
    p_states_ez = { 'Standing', 'Moving', 'Crouching', 'Slowwalk', 'Air', 'Air duck', 'Legit aa' },

    body_yaw = 0,
    ez = false,
    active_i = 1,
    is_holding_space = false,
    lf_value = 0,
}

local helpers = {}
helpers = {
    in_air = function(player)
        if player == nil then return end
        local flags = player.m_fFlags
        if bit.band(flags, 1) == 0 or vars.is_holding_space then
            return true
        end
        return false
    end,
    on_ground = function(player)
        if player == nil then return end
        local flags = player.m_fFlags
        if bit.band(flags, 1) == 1 and not vars.is_holding_space then
            return true
        end
        return false
    end,
    is_crouching = function(player)
        if player == nil then return end
        if player.m_flDuckAmount > 0.7 then
            return true
        end
        return false
    end,
    get_velocity = function(player)
        if player == nil then return end
        local velocity_ref = player.m_vecVelocity
        local velocity = velocity_ref:length()
        return velocity
    end,
    TICKS_TO_TIME = function(ticks) 
        return globals.tickinterval * ticks
    end,
    gradient_text = function(r1, g1, b1, a1, r2, g2, b2, a2, text)
        local output = ''
        local len = #text-1
        local rinc = (r2 - r1) / len
        local ginc = (g2 - g1) / len
        local binc = (b2 - b1) / len
        local ainc = (a2 - a1) / len
        for i=1, len+1 do
            output = output .. ('\a%02x%02x%02x%02x%s'):format(r1, g1, b1, a1, text:sub(i, i))
            r1 = r1 + rinc
            g1 = g1 + ginc
            b1 = b1 + binc
            a1 = a1 + ainc
        end
    
        return output
    end,
    can_shift_shot = function(ent)
        if ent:is_alive() == false or ent == nil then
            return false
        end
        local weapon = ent.m_hActiveWeapon
        if weapon == nil then
            return false
        end

        local next_attack = ent.m_flNextAttack + 0.25
        local jewfag = weapon.m_flNextPrimaryAttack
        if jewfag == nil then
            return
        end
        local next_primary_attack = jewfag + 0.5
        if next_attack == nil or next_primary_attack == nil then
            return false
        end
        return next_attack - globals.curtime < 0 and next_primary_attack - globals.curtime < 0
    end,
    clamp = function(num, min, max)
        if num < min then
            num = min
        elseif num > max then
            num = max
        end
        return num
    end,
}

local script_db = {}
script_db = {
    username = 'Owned by d4HiD',
    lua_name = 'dnxyaw',
    lua_version = 'Owner',
    texd = helpers.gradient_text(230,230,230,255,75,230,75,255,'_dnx.yaw')
}
ui.sidebar(script_db.texd,'dragon')

local UI = {}
UI = {
    list = {},

    push = function( args )
        assert( args.element, 'Element is nil' )
        assert( args.index, 'Index is nil' )
        assert( type( args.index ) == 'string', 'Invalid type of index' )
        UI.list[ args.index ] = { }
        UI.list[ args.index ].element = args.element
        UI.list[ args.index ].flags = args.flags or ''
        UI.list[ args.index ].visible_state = function()
            if not args.conditions then
                return true
            end
            for k, v in pairs( args.conditions ) do
                if not v() then
                    return false
                end
            end
            return true
        end
        UI.list[ args.index ].element:set_callback( UI.visibility_handle )
    end,

    get = function( index )
        return UI.list[ index ] and UI.list[ index ].element:get()
    end,

    get_element = function( index )
        return UI.list[ index ] and UI.list[ index ].element
    end,

    delete = function( index )
        UI.get( index ):destroy()
        UI.list[ index ] = nil
    end,

    contains = function( index, value )
        index = UI.get( index )
        if type( index ) ~= "table" then
            return false
        end
        for i = 1, #index do
            if index[ i ] == value then
                return true
            end
        end
        return false
    end,

    visibility_handle = function()
        for _, v in pairs( UI.list ) do
            v.element:set_visible( v.visible_state() )
        end
    end,
}

local configs = {}
configs = {
    code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

    encode = function(data)
        return ( ( data:gsub( '.', function( x ) 
            local r, b='', x:byte(  )
            for i = 8, 1, -1 do r = r .. ( b%2 ^ i - b%2 ^ ( i - 1 ) > 0 and '1' or '0' ) end
            return r;
        end ) .. '0000' ):gsub( '%d%d%d?%d?%d?%d?', function( x )
            if ( #x < 6 ) then return '' end
            local c = 0
            for i = 1, 6 do c = c + ( x:sub( i, i ) == '1' and 2 ^ ( 6 - i ) or 0 ) end
            return configs.code:sub( c + 1, c + 1 )
        end) .. ( { '', '==', '=' } )[ #data%3 + 1 ] )
    end,

    decode = function(data)
        data = string.gsub( data, '[^' .. configs.code .. '=]', '' )
        return ( data:gsub( '.', function( x )
            if ( x == '=' ) then return '' end
            local r, f = '', ( configs.code:find( x ) - 1 )
            for i = 6, 1, -1 do r = r .. ( f%2 ^ i - f%2 ^ ( i - 1 ) > 0 and '1' or '0' ) end
            return r;
        end ):gsub( '%d%d%d?%d?%d?%d?%d?%d?', function( x )
            if ( #x ~= 8 ) then return '' end
            local c = 0
            for i = 1, 8 do c = c + ( x:sub( i, i ) == '1' and 2 ^ ( 8 - i ) or 0 ) end
            return string.char( c )
        end) )
    end,

    export = function()
        local table = {}
        for k, v in pairs( UI.list ) do
            if v.flags == 'c' then
                table[k] = { UI.list[ k ].element:get().r, UI.list[ k ].element:get().g, UI.list[ k ].element:get().b, UI.list[ k ].element:get().a }
            elseif v.flags == '-' then
                goto skip
            else
                table[k] = UI.list[ k ].element:get()
            end
            ::skip::
        end
    
        clipboard.set(configs.encode(json.stringify(table)))
    end,

    import = function(config)
        local data = json.parse(configs.decode(config))
    
        for item, value in pairs(data) do
            if UI.list[ item ].flags == 'c' then
                UI.get_element(item):set(color(value[1], value[2], value[3], value[4]))
            else
                UI.get_element(item):set(value)
            end
        end
    end,
}

local ref = {
    pitch = ui.find("Aimbot", "Anti Aim", "Angles", "Pitch"),
    yaw = {
        mode = ui.find("Aimbot", "Anti Aim", "Angles", "Yaw"),
        base = ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Base"),
        offset = ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Offset"),
        avoid_backstab = ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Avoid Backstab")
    },
    yaw_modifier = {
        mode = ui.find("Aimbot", "Anti Aim", "Angles", "Yaw Modifier"),
        offset = ui.find("Aimbot", "Anti Aim", "Angles", "Yaw Modifier", "Offset")
    },
    body_yaw = {
        switch = ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw"),
        inverter = ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Inverter"),
        left_limit = ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Left Limit"),
        right_limit = ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Right Limit"),
        fake_options = ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Options"),
        desync_freestand = ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Freestanding"),
        on_shot_desync = ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "On Shot"),
        lby_mode = ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "LBY Mode"),
    },
    roll = {
        switch = ui.find('Aimbot','Anti Aim',"Angles","Extended Angles"),
        pitch = ui.find('Aimbot','Anti Aim',"Angles","Extended Angles","Extended Pitch"),
        roll = ui.find('Aimbot','Anti Aim',"Angles","Extended Angles","Extended Roll"),
    },
    freestanding = {
        switch = ui.find("Aimbot", "Anti Aim", "Angles", "Freestanding"),
        disable_yaw_modifiers = ui.find("Aimbot", "Anti Aim", "Angles", "Freestanding", "Disable Yaw Modifiers"),
        body_freestanding = ui.find("Aimbot", "Anti Aim", "Angles", "Freestanding", "Disable Yaw Modifiers")
    },
    leg_movement = ui.find("Aimbot", "Anti Aim", "Misc", "Leg Movement"),
    slowwalk = ui.find("Aimbot", "Anti Aim", "Misc", "Slow Walk"),
    fakeduck = ui.find("Aimbot", "Anti Aim", "Misc", "Fake Duck"),
    fakelag = {
        switch = ui.find("Aimbot", "Anti Aim", "Fake Lag", "Enabled"),
        limit = ui.find("Aimbot", "Anti Aim", "Fake Lag", "Limit"),
        variability = ui.find("Aimbot", "Anti Aim", "Fake Lag", "Variability")
    },
    auto_peek = ui.find("Aimbot", "Ragebot", "Main", "Peek Assist"),
    hide_shots = {
        switch = ui.find("Aimbot", "Ragebot", "Main", "Hide Shots"),
        options = ui.find("Aimbot", "Ragebot", "Main", "Hide Shots", "Options")
    },
    doubletap = {
        switch = ui.find("Aimbot", "Ragebot", "Main", "Double Tap"),
        lag_options = ui.find("Aimbot", "Ragebot", "Main", "Double Tap", "Lag Options"),
        fakelag_limit = ui.find("Aimbot", "Ragebot", "Main", "Double Tap", "Fake Lag Limit")
    },
    autoscope = ui.find("Aimbot", "Ragebot", "Accuracy", "Auto Scope"),
    hitchance = {
        value = ui.find("Aimbot", "Ragebot", "Selection", "Hit Chance"),
        strict_hitchance = ui.find("Aimbot", "Ragebot", "Selection", "Hit Chance", "Strict Hit Chance")
    },
    minimum_damage = {
        value = ui.find("Aimbot", "Ragebot", "Selection", "Minimum Damage"),
        delay_show = ui.find("Aimbot", "Ragebot", "Selection", "Minimum Damage", "Delay Shot")
    },
    body_aim = {
        mode = ui.find("Aimbot", "Ragebot", "Safety", "Body Aim"),
        disablers = ui.find("Aimbot", "Ragebot", "Safety", "Body Aim", "Disablers")
    },
    safe_point = ui.find("Aimbot", "Ragebot", "Safety", "Safe Points"),
    hitbox_safety = ui.find("Aimbot", "Ragebot", "Safety", "Ensure Hitbox Safety"),
    thirdperson = ui.find("Visuals", "World", "Main", "Force Thirdperson"),
    override_zoom = {
        force_viewmodel = ui.find("Visuals", "World", "Main", "Override Zoom", "Force Viewmodel"),
        scope_overlay = ui.find("Visuals", "World", "Main", "Override Zoom", "Scope Overlay")
    }
}

local group = ui.create("Nothing", "Lua's user-interface")

UI.push( { element = group:selectable("Anti-Aim improvment options", { "Legit Anti-Aim on-use" }), index = 'antiaim_options', flags = '', conditions = {
} } )

UI.push( { element = group:combo("Anti-Aim type", { "Meta", "Aggressive", "Dynamic", "Super Static", "Builder" }), index = 'antiaim_type', flags = '', conditions = {
} } )

UI.push( { element = group:selectable("Applying Exploits:", { "Rolling", "Untrusted Pitch", "Lower Body Yaw" }), index = 'applying_exploits', flags = '', conditions = {
    function() return UI.get('antiaim_type') ~= "Builder" end
} } )

UI.push( { element = group:selectable("Misc", { "Old Animation", "Leg Fucker", "Indicators", "Clantag" }), index = 'misc', flags = '', conditions = {
} } )

UI.push( { element = group:combo("Active condition", vars.p_states), index = 'condition_selector', flags = '-', conditions = {
    function() return UI.get('antiaim_type') == "Builder" end
} } )

for i = 1, #vars.p_states do
    local condition = vars.p_states[i]

    local base_argument = function() 
        return ( UI.get('antiaim_type') == "Builder" and condition == UI.get('condition_selector') )
    end

    UI.push( { element = group:switch("[".. condition .."] Enable condition"), index = 'preset_enable_' .. condition, flags = '', conditions = {
        base_argument,
        function() return i ~= 1 end
    } } )

    base_argument = function() 
        return ( UI.get('antiaim_type') == "Builder" and condition == UI.get('condition_selector') ) and (i == 1 and true or UI.get('preset_enable_' .. condition))
    end

    UI.push( { element = group:selectable("[".. condition .."] Applying Exploits:", { "Rolling", "Untrusted Pitch", "Lower Body Yaw" }), index = 'applying_exploits_' .. condition, flags = '', conditions = {
        base_argument
    } } )

    UI.push( { element = group:combo("[".. condition .."] Yaw logic:", { "Left/Right -/+", "Random Min/Max" }), index = 'yaw_logic_' .. condition, flags = '', conditions = {
        base_argument
    } } )

    UI.push( { element = group:slider("[".. condition .."] Yaw input #1", -180, 180, 0), index = 'yaw_input_1_' .. condition, flags = '', conditions = {
        base_argument
    } } )

    UI.push( { element = group:slider("[".. condition .."] Yaw input #2", -180, 180, 0), index = 'yaw_input_2_' .. condition, flags = '', conditions = {
        base_argument
    } } )

    UI.push( { element = group:combo("[".. condition .."] Yaw jitter mode:", { "Disabled", "Center", "Offset", "Random", "Spin" }), index = 'yaw_jitter_mode_' .. condition, flags = '', conditions = {
        base_argument
    } } )

    UI.push( { element = group:combo("[".. condition .."] Yaw jitter logic:", { "Left/Right -/+", "Random Min/Max" }), index = 'yaw_jitter_logic_' .. condition, flags = '', conditions = {
        base_argument,
        function() return UI.get('yaw_jitter_mode_' .. condition) ~= "Disabled" end
    } } )

    UI.push( { element = group:slider("[".. condition .."] Jitter input #1", -180, 180, 0), index = 'jitter_input_1_' .. condition, flags = '', conditions = {
        base_argument,
        function() return UI.get('yaw_jitter_mode_' .. condition) ~= "Disabled" end
    } } )

    UI.push( { element = group:slider("[".. condition .."] Jitter input #2", -180, 180, 0), index = 'jitter_input_2_' .. condition, flags = '', conditions = {
        base_argument,
        function() return UI.get('yaw_jitter_mode_' .. condition) ~= "Disabled" end
    } } )

    UI.push( { element = group:combo("[".. condition .."] Body yaw mode:", { "Disabled", "Static", "Jitter" }), index = 'body_yaw_mode_' .. condition, flags = '', conditions = {
        base_argument
    } } )

    UI.push( { element = group:combo("[".. condition .."] Body yaw logic:", { "Left/Right -/+", "Random Min/Max" }), index = 'body_yaw_logic_' .. condition, flags = '', conditions = {
        base_argument,
        function() return UI.get('body_yaw_mode_' .. condition) ~= "Disabled" end
    } } )

    UI.push( { element = group:slider("[".. condition .."] Body yaw input #1", -180, 180, 0), index = 'body_yaw_input_1_' .. condition, flags = '', conditions = {
        base_argument,
        function() return UI.get('body_yaw_mode_' .. condition) ~= "Disabled" end
    } } )

    UI.push( { element = group:slider("[".. condition .."] Body yaw input #2", -180, 180, 0), index = 'body_yaw_input_2_' .. condition, flags = '', conditions = {
        base_argument,
        function() return UI.get('body_yaw_mode_' .. condition) ~= "Disabled" end
    } } )

    UI.push( { element = group:combo("[".. condition .."] Fake yaw logic:", { "Left/Right -/+", "Random Min/Max", "Calculation Min/Max" }), index = 'fake_yaw_logic_' .. condition, flags = '', conditions = {
        base_argument
    } } )

    UI.push( { element = group:slider("[".. condition .."] Fake yaw input #1", 0, 60, 60), index = 'fake_yaw_input_1_' .. condition, flags = '', conditions = {
        base_argument
    } } )

    UI.push( { element = group:slider("[".. condition .."] Fake yaw input #2", 0, 60, 60), index = 'fake_yaw_input_2_' .. condition, flags = '', conditions = {
        base_argument
    } } )

    UI.push( { element = group:selectable("[".. condition .."] Fake Options", { "Avoid Overlap", "Jitter", "Randomize Jitter", "Anti Bruteforce" }), index = 'fake_options_' .. condition, flags = '', conditions = {
        base_argument
    } } )

    UI.push( { element = group:combo("[".. condition .."] Freestanding Desync", { "Off", "Peek Fake", "Peek Real" }), index = 'freestanding_mode_' .. condition, flags = '', conditions = {
        base_argument
    } } )

    UI.push( { element = group:combo("[".. condition .."] Desync On Shot", { "Default", "Opposite", "Freestanding", "Switch" }), index = 'onshot_mode_' .. condition, flags = '', conditions = {
        base_argument
    } } )
end

group:label("")
group:button("                                                                   \aF5F5F5FFExport config to clipboard                                                                   ", function()
    local status, error = pcall(configs.export)
    if status then
        common.add_notify(script_db.lua_name, "Succesfully exported settings to clipboard")
    else
        common.add_notify(script_db.lua_name, "Error while exporting settings to clipboard (" .. error .. ")")
    end
end)

group:button("                                                                \aF5F5F5FFImport config from clipboard                                                                ", function()
    local data = clipboard.get()

    local status, error = pcall(configs.import, data)
    if status then
        common.add_notify(script_db.lua_name, "Succesfully imported settings from clipboard")
    else
        common.add_notify(script_db.lua_name, "Error while importing config (" .. error .. ")")
    end
end)

UI.visibility_handle()

local g_handle_aa = {}
g_handle_aa = {
    value = {
        using = false,
        randomseed = 0,
        mv_desync = 0,
        by_degree = 0,
    },

    ref_antiaim = {
        pitch = 'Down',
        yaw = 'Backward',
        yawbase = 'At Target',
        yawadd = 0,
        yawjitter = "Disabled",
        yawjitter_value = 0,
        inverter = false,
        left_limit = 0,
        right_limit = 0,
        fakeoption = {
            avoidoverlap = false,
            jitter = false,
            randomjitter = false,
            antibrute = false
        },
        fsbodyyaw = "Off",
        onshot = 'Default',
        lby = 'Disabled'
    },

    on_use = function(c)
        g_handle_aa.value.using = false
        
        local is_holding_use = bit.band(c.buttons, bit.lshift(1, 5)) > 0
        local active_weapon = entity.get_local_player():get_player_weapon()

        local is_bomb_in_hand = false       
        if active_weapon then
            is_bomb_in_hand = active_weapon:get_classname() == "CC4"
        end 
        local is_in_bombzone = entity.get_local_player().m_bInBombZone
        local is_planting = is_in_bombzone and is_bomb_in_hand       
        local planted_c4_table = entity.get_entities("CPlantedC4")
        local is_c4_planted = #planted_c4_table > 0
        local bomb_distance = 100        
        if is_c4_planted then
            local c4_entity = planted_c4_table[#planted_c4_table]       
            local c4_origin = c4_entity:get_origin()
            local my_origin = entity.get_local_player():get_origin()       
            bomb_distance = my_origin:dist(c4_origin)
        end

        local is_defusing = bomb_distance < 62 and entity.get_local_player().m_iTeamNum == 3

        if is_defusing then
            return
        end

        local camera_angles = render.camera_angles()
        local eye_position = entity.get_local_player():get_eye_position()
        local forward_vector = vector():angles(camera_angles)
        local trace_end = eye_position + forward_vector * 8192
        local trace = utils.trace_line(eye_position, trace_end, entity.get_local_player(), 0x4600400B)
        local is_using = is_holding_use
        
        if trace and trace.fraction < 1 and trace.entity then
            local class_name = trace.entity:get_classname()
            is_using = class_name ~= "CWorld" and class_name ~= "CFuncBrush" and class_name ~= "CCSPlayer"
        end

        if not is_using and not is_planting then
            c.buttons = bit.band(c.buttons, bit.bnot(bit.lshift(1, 5)))
            g_handle_aa.value.using = true
        end
    end,

    by = (function()
        local j = {}
        local bodyyaw_jitter = function(c, d, e)
            local f = {}
            if e == -180 then
                f[1] = 0.0
            else
                if e ~= 0 then
                    if e == 180 then
                        f[0] = 0.0
                        f[1] = d
                    else
                        math.randomseed(e)
                        f[0] = math.random(-d, d)
                        f[1] = math.random(-d, d)
                    end
                    return f[c % 2]
                end
                f[1] = d
            end
            f[0] = -d
            return f[c % 2]
        end

        j.override_limit = function(g, h, i, x, f )
            local b = 60
            local k = f
            local l = bodyyaw_jitter(g_handle_aa.value.randomseed, 60, k)
            g_handle_aa.ref_antiaim.inverter = l < 0 and true
            b = math.abs(l)
            g_handle_aa.ref_antiaim.left_limit = (math.min(b, x))
            g_handle_aa.ref_antiaim.right_limit = (math.min(b, x))
        end

        j.jitter = function(f,d)
            local m = globals.choked_commands
            local g = entity.get_local_player()
            local h = g:get_player_weapon()
            if g == nil or h == nil then
                return
            end
            if m == 1 then
                g_handle_aa.value.randomseed = g_handle_aa.value.randomseed + 1
            end
            j.override_limit(g, h, m, d, f)
        end
    
        j.static = function(a, b)
            if a > b and a > 0 then
                g_handle_aa.ref_antiaim.left_limit = math.min(b, 60)
                g_handle_aa.ref_antiaim.right_limit = math.min(b, 60)
                g_handle_aa.ref_antiaim.inverter = false
            elseif a < b and a > 0 then
                g_handle_aa.ref_antiaim.left_limit = math.min(a, 60)
                g_handle_aa.ref_antiaim.right_limit = math.min(a, 60)
                g_handle_aa.ref_antiaim.inverter = true
            elseif math.abs(a) > b and a < 0 then
                g_handle_aa.ref_antiaim.left_limit = math.min(b, 60)
                g_handle_aa.ref_antiaim.right_limit = math.min(b, 60)
                g_handle_aa.ref_antiaim.inverter = true
            elseif math.abs(a) < b and a < 0 then
                g_handle_aa.ref_antiaim.left_limit = math.min(math.abs(a), 60)
                g_handle_aa.ref_antiaim.right_limit = math.min(math.abs(a), 60)
                g_handle_aa.ref_antiaim.inverter = true
            end
        end
        
        return j
    end)(),
 
    run_active_i = function()
        local lp = entity.get_local_player()

        if common.is_button_down(0x45) then
            vars.active_i = 7
        elseif helpers.in_air(lp) and helpers.is_crouching(lp) then
            vars.active_i = 6
        elseif helpers.in_air(lp) then
            vars.active_i = 5
        elseif helpers.is_crouching(lp) then
            vars.active_i = 3
        elseif ref.slowwalk:get() and helpers.get_velocity(lp) > 10 then
            vars.active_i = 4
        elseif helpers.get_velocity(lp) > 10 then
            vars.active_i = 2
        elseif helpers.get_velocity(lp) < 10 then
            vars.active_i = 1
        end
    end,

    setup_antiaim = function()
        local _state_ = vars.p_states_ez[vars.active_i]
        local team = entity.get_local_player().m_iTeamNum

        if common.is_button_down(0x45) then
            ref.freestanding.switch:override(false)
        else
            ref.freestanding.switch:override(nil)
        end

        g_handle_aa.ref_antiaim.pitch = common.is_button_down(0x45) and "Disabled" or "Down"
        g_handle_aa.ref_antiaim.yaw = "Backward"
        g_handle_aa.ref_antiaim.yawbase = common.is_button_down(0x45) and "Local View" or "At Target"

        if UI.get('antiaim_type') ~= "Builder" then
            g_handle_aa.ref_antiaim.lby = UI.contains('applying_exploits', "Lower Body Yaw") and "Opposite" or "Disabled"
            ref.roll.pitch:set(UI.contains('applying_exploits', "Untrusted Pitch") and 145 or 0)
            ref.roll.roll:set(UI.contains('applying_exploits', "Rolling") and 90 or 0)

            g_handle_aa.ref_antiaim.yawjitter = "Center"
            g_handle_aa.ref_antiaim.inverter = false
            g_handle_aa.ref_antiaim.left_limit = 60
            g_handle_aa.ref_antiaim.right_limit = 60
            g_handle_aa.ref_antiaim.fakeoption.avoidoverlap = false
            g_handle_aa.ref_antiaim.fakeoption.jitter = true
            g_handle_aa.ref_antiaim.fakeoption.randomjitter = false
            g_handle_aa.ref_antiaim.fakeoption.antibrute = false
            g_handle_aa.ref_antiaim.fsbodyyaw = "Off"
            g_handle_aa.ref_antiaim.onshot = "Default"
            if _state_ == "Legit aa" then
                g_handle_aa.ref_antiaim.yawadd = -180
                g_handle_aa.ref_antiaim.yawjitter_value = 0
                -- g_handle_aa.ref_antiaim.fakeoption.avoidoverlap = true
                -- g_handle_aa.ref_antiaim.fakeoption.jitter = false
                -- g_handle_aa.ref_antiaim.fsbodyyaw = "Peek Fake"
                g_handle_aa.ref_antiaim.onshot = "Switch"
            else
                if UI.get('antiaim_type') == "Meta" then
                    if _state_ == "Standing" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and -12 or 17
                        g_handle_aa.ref_antiaim.yawjitter_value = -36
                    elseif _state_ == "Moving" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and -23 or 20
                        g_handle_aa.ref_antiaim.yawjitter_value = -38
                    elseif _state_ == "Slowwalk" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and -13 or 9
                        g_handle_aa.ref_antiaim.yawjitter_value = -50
                    elseif _state_ == "Air" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and 5 or 12
                        g_handle_aa.ref_antiaim.yawjitter_value = -63
                    elseif _state_ == "Air duck" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and -10 or 5
                        g_handle_aa.ref_antiaim.yawjitter_value = -48
                    elseif _state_ == "Crouching" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and -12 or 17
                        g_handle_aa.ref_antiaim.yawjitter_value = -53
                    end
                elseif UI.get('antiaim_type') == "Aggressive" then
                    if _state_ == "Standing" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and -37 or 37
                        g_handle_aa.ref_antiaim.yawjitter_value = 0
                    elseif _state_ == "Moving" then
                        if team == 2 then
                            g_handle_aa.ref_antiaim.yawadd = vars.ez and -7 or 10
                            g_handle_aa.ref_antiaim.yawjitter_value = -70
                        elseif team == 3 then
                            g_handle_aa.ref_antiaim.yawadd = vars.ez and -37 or 41
                            g_handle_aa.ref_antiaim.yawjitter_value = 0
                        end
                    elseif _state_ == "Slowwalk" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and -14 or 14
                        g_handle_aa.ref_antiaim.yawjitter_value = -44
                    elseif _state_ == "Air" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and 7 or 7
                        g_handle_aa.ref_antiaim.yawjitter_value = -56
                    elseif _state_ == "Air duck" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and -25 or 41
                        g_handle_aa.ref_antiaim.yawjitter_value = 0
                    elseif _state_ == "Crouching" then
                        g_handle_aa.ref_antiaim.yawadd = 0
                        g_handle_aa.ref_antiaim.yawjitter_value = -15
                    end
                elseif UI.get('antiaim_type') == "Dynamic" then
                    if _state_ == "Standing" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and -12 or 17
                        g_handle_aa.ref_antiaim.yawjitter_value = -36
                    elseif _state_ == "Moving" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and -10 or 11
                        g_handle_aa.ref_antiaim.yawjitter_value = -53
                    elseif _state_ == "Slowwalk" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and -13 or 9
                        g_handle_aa.ref_antiaim.yawjitter_value = -50
                    elseif _state_ == "Air" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and -7 or 7
                        g_handle_aa.ref_antiaim.yawjitter_value = -43
                    elseif _state_ == "Air duck" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and -12 or 17
                        g_handle_aa.ref_antiaim.yawjitter_value = -43
                    elseif _state_ == "Crouching" then
                        g_handle_aa.ref_antiaim.yawadd = vars.ez and -5 or 14
                        g_handle_aa.ref_antiaim.yawjitter_value = -47
                    end
                elseif UI.get('antiaim_type') == "Super Static" then
                    g_handle_aa.ref_antiaim.fakeoption.jitter = false
                    g_handle_aa.ref_antiaim.yawjitter_value = 0
                    if _state_ == "Standing" then
                        g_handle_aa.ref_antiaim.yawadd = 0
                    elseif _state_ == "Moving" then
                        g_handle_aa.ref_antiaim.yawadd = 0
                    elseif _state_ == "Slowwalk" then
                        g_handle_aa.ref_antiaim.yawadd = 18
                    elseif _state_ == "Air" then
                        g_handle_aa.ref_antiaim.yawadd = 25
                    elseif _state_ == "Air duck" then
                        g_handle_aa.ref_antiaim.yawadd = 25
                    elseif _state_ == "Crouching" then
                        g_handle_aa.ref_antiaim.yawadd = 25
                    end
                end
            end
        else
            local condition = UI.get('preset_enable_' .. _state_) and _state_ or "Global"

            g_handle_aa.ref_antiaim.lby = UI.contains('applying_exploits_'.. condition, "Lower Body Yaw") and "Opposite" or "Disabled"
            ref.roll.pitch:set(UI.contains('applying_exploits_'.. condition, "Untrusted Pitch") and 145 or 0)
            ref.roll.roll:set(UI.contains('applying_exploits_'.. condition, "Rolling") and 90 or 0)

            if UI.get('yaw_logic_' .. condition) == "Left/Right -/+" then
                g_handle_aa.ref_antiaim.yawadd = vars.ez and UI.get('yaw_input_1_' .. condition) or UI.get('yaw_input_2_' .. condition)
            elseif UI.get('yaw_logic_' .. condition) == "Random Min/Max" then
                g_handle_aa.ref_antiaim.yawadd = utils.random_int(UI.get('yaw_input_1_' .. condition), UI.get('yaw_input_2_' .. condition))
            end

            g_handle_aa.ref_antiaim.yawjitter = UI.get('yaw_jitter_mode_' .. condition)

            if UI.get('yaw_jitter_logic_' .. condition) == "Left/Right -/+" then
                g_handle_aa.ref_antiaim.yawjitter_value = vars.ez and UI.get('jitter_input_1_' .. condition) or UI.get('jitter_input_2_' .. condition)
            elseif UI.get('yaw_jitter_logic_' .. condition) == "Random Min/Max" then
                g_handle_aa.ref_antiaim.yawjitter_value = utils.random_int(UI.get('jitter_input_1_' .. condition), UI.get('jitter_input_2_' .. condition))
            end

            if UI.get('fake_yaw_logic_' .. condition) == "Left/Right -/+" then
                g_handle_aa.value.mv_desync = vars.ez and UI.get('fake_yaw_input_1_' .. condition) or UI.get('fake_yaw_input_2_' .. condition)
            elseif UI.get('fake_yaw_logic_' .. condition) == "Random Min/Max" then
                g_handle_aa.value.mv_desync = utils.random_int(UI.get('fake_yaw_input_1_' .. condition), UI.get('fake_yaw_input_2_' .. condition))
            elseif UI.get('fake_yaw_logic_' .. condition) == "Calculation Min/Max" then
                local min = math.min(UI.get('fake_yaw_input_1_' .. condition), UI.get('fake_yaw_input_2_' .. condition)) - 1
                local max = math.max(UI.get('fake_yaw_input_1_' .. condition), UI.get('fake_yaw_input_2_' .. condition))
                
                if g_handle_aa.value.mv_desync >= max then
                    g_handle_aa.value.mv_desync = min
                else
                    g_handle_aa.value.mv_desync = g_handle_aa.value.mv_desync + 1
                end
            end

            if UI.get('body_yaw_logic_' .. condition) == "Left/Right -/+" then
                g_handle_aa.value.by_degree = vars.ez and UI.get('body_yaw_input_1_' .. condition) or UI.get('body_yaw_input_2_' .. condition)
            elseif UI.get('body_yaw_logic_' .. condition) == "Random Min/Max" then
                g_handle_aa.value.by_degree = utils.random_int(UI.get('body_yaw_input_1_' .. condition), UI.get('body_yaw_input_2_' .. condition))
            end

            if UI.get('body_yaw_mode_' .. condition) == "Disabled" then
                g_handle_aa.ref_antiaim.inverter = false
                g_handle_aa.ref_antiaim.left_limit = g_handle_aa.value.mv_desync
                g_handle_aa.ref_antiaim.right_limit = g_handle_aa.value.mv_desync
            elseif UI.get('body_yaw_mode_' .. condition) == "Static" then
                g_handle_aa.by.static(g_handle_aa.value.by_degree, g_handle_aa.value.mv_desync)
            elseif UI.get('body_yaw_mode_' .. condition) == "Jitter" then
                g_handle_aa.by.jitter(g_handle_aa.value.by_degree, g_handle_aa.value.mv_desync)
            end
         
            g_handle_aa.ref_antiaim.fakeoption.avoidoverlap = UI.contains('fake_options_' .. condition, "Avoid Overlap")
            g_handle_aa.ref_antiaim.fakeoption.jitter = UI.contains('fake_options_' .. condition, "Jitter")
            g_handle_aa.ref_antiaim.fakeoption.randomjitter = UI.contains('fake_options_' .. condition, "Randomize Jitter")
            g_handle_aa.ref_antiaim.fakeoption.antibrute = UI.contains('fake_options_' .. condition, "Anti Bruteforce")
            g_handle_aa.ref_antiaim.fsbodyyaw = UI.get('freestanding_mode_' .. condition)
            g_handle_aa.ref_antiaim.onshot = UI.get('onshot_mode_' .. condition)
        end

        ref.pitch:set(g_handle_aa.ref_antiaim.pitch)
        ref.yaw.avoid_backstab:set(true)
        ref.yaw.mode:set(g_handle_aa.ref_antiaim.yaw)
        ref.yaw.base:set(g_handle_aa.ref_antiaim.yawbase)
        ref.yaw.offset:set(g_handle_aa.ref_antiaim.yawadd)
        ref.yaw_modifier.mode:set(g_handle_aa.ref_antiaim.yawjitter)
        ref.yaw_modifier.offset:set(g_handle_aa.ref_antiaim.yawjitter_value)
        ref.body_yaw.left_limit:set(g_handle_aa.ref_antiaim.left_limit)
        ref.body_yaw.right_limit:set(g_handle_aa.ref_antiaim.right_limit)
        ref.body_yaw.fake_options:set(
            g_handle_aa.ref_antiaim.fakeoption.avoidoverlap and "Avoid Overlap" or " ",
            g_handle_aa.ref_antiaim.fakeoption.jitter and "Jitter" or " ",
            g_handle_aa.ref_antiaim.fakeoption.randomjitter and "Randomize Jitter" or " ",
            g_handle_aa.ref_antiaim.fakeoption.antibrute and "Anti Bruteforce" or " "
        )
        ref.body_yaw.desync_freestand:set(g_handle_aa.ref_antiaim.fsbodyyaw)
        ref.body_yaw.inverter:set(g_handle_aa.ref_antiaim.inverter)
        ref.body_yaw.lby_mode:set(g_handle_aa.ref_antiaim.lby)
        ref.roll.switch:set(true)
    end
}

local g_notifactions = (function()
    local notify_cache = {}
    local a = {callback_registered = false, maximum_count = 5}
    function a:register_callback()
        if self.callback_registered then
            return
        end
        events.render:set(
            function()
                local e = 1
                local aI = notify_cache
                for aC = #aI, 1, -1 do
                    notify_cache[aC].time = notify_cache[aC].time - globals.frametime
                    local aJ, i = 255, 0
                    local aL = 150
                    local aM = 0.5
                    local aN = aI[aC]
                    if aN.time < 0 then
                        table.remove(notify_cache, aC)
                    else
                        local H = aN.def_time - aN.time
                        H = H > 1 and 1 or H
                        if aN.time < 1 or H < 1 then
                            i = (H < 1 and H or aN.time) / 1
                            aJ = i * 255
                            aL = i * 150
                            aM = i * 0.5
                            if i < 0.2 then
                                e = e + 8 * (1.0 - i / 0.2)
                            end
                        end
                        local aP = math.floor(render.measure_text(1, nil, "[dnxyaw]  " .. aN.draw).x * 1.03)
                        local I = render.measure_text(1, nil, "[dnxyaw]  ").x
                        local aQ = render.measure_text(1, nil, aN.draw).x
                        local x__ = screen_size.x / 2 - aP / 2 + 3
                        local y__ = screen_size.y - screen_size.y / 100 * 13.4 + e
                        local r,g,b = 145, 145, 255
                        render.rect(vector(x__ - 1, y__ - 20),vector(x__ - 1 + aP + 2, y__ - 20 + 22),color(18, 7, 8, aJ > 255 and 255 or aJ))
                        render.circle(vector(x__ - 1, y__ - 8),color(18, 7, 8, aJ > 255 and 255 or aJ), 12, 90, 0.5)
                        render.circle(vector(x__ + aP + 1, y__ - 8),color(18, 7, 8, aJ > 255 and 255 or aJ), 12, 270, 0.5)
                        render.circle_outline(vector(x__ - 1, y__ - 9),color(r,g,b, aJ > 200 and 200 or aJ), 13, 90, aM, 2.5)
                        render.circle_outline(vector(x__ + aP + 1, y__ - 9),color(r,g,b, aJ > 200 and 200 or aJ), 13,-90,aM,2.5)
                        render.line(vector(x__ + aP + 1, y__ + 3),vector(x__ + 149 - aL, y__ + 3),color(r,g,b, aJ > 200 and 200 or aJ))
                        render.line(vector(x__ + aP + 1, y__ + 2),vector(x__ + 149 - aL, y__ + 2),color(r,g,b, aJ > 200 and 200 or aJ))
                        render.line(vector(x__ - 1, y__ - 21.3),vector(x__ - 149 + aP + aL,y__ - 21.3),color(r,g,b, aJ > 200 and 200 or aJ))
                        render.line(vector(x__ - 1, y__ - 20.6),vector(x__ - 149 + aP + aL,y__ - 20.6),color(r,g,b, aJ > 200 and 200 or aJ))
                        render.text(1, vector(x__ + aP / 2 - aQ / 2, y__ - 9), color(r,g,b, aJ), "c", "[dnxyaw]  ")
                        render.text(1, vector(x__ + aP / 2 + I / 2, y__ - 9), color(255, 255, 255, aJ), "c", aN.draw)
                        e = e - 33
                    end
                end
                self.callback_registered = true
            end
        )
    end
    function a:paint(aY, aB)
        local L = tonumber(aY) + 1
        for aC = self.maximum_count, 2, -1 do
            notify_cache[aC] = notify_cache[aC - 1]
        end
        notify_cache[1] = {time = L, def_time = L, draw = aB}
        self:register_callback()
    end
    return a
end)()
g_notifactions:paint(4, "Welcome back! ".. script_db.username)

local g_old_animation = {}
g_old_animation = {
    hooked_function = nil,
    updateCSA = function(thisptr, edx)
        local is_localplayer = ffi.cast("uintptr_t", thisptr) == get_entity_address(entity.get_local_player():get_index())
        g_old_animation.hooked_function(thisptr, edx)
      
        if is_localplayer then
            if UI.contains('misc', "Old Animation") then
                ffi.cast("float*", ffi.cast("uintptr_t", thisptr) + 10104)[6] = 1

                ffi.cast("float*", ffi.cast("uintptr_t", thisptr) + 10104)[0] = 8
            end
        end
    end,

    setup = function()
        local local_player = entity.get_local_player()
        if not local_player then return end
      
        local local_player_ptr = get_entity_address(local_player:get_index())
        if not local_player_ptr or g_old_animation.hooked_function then return end

        local C_CSPLAYER = vmt_hook.new(local_player_ptr)
        g_old_animation.hooked_function = C_CSPLAYER.hook("void(__fastcall*)(void*, void*)", g_old_animation.updateCSA, 224)
    end
}

local animate = (function()
    local anim = {}

    local lerp = function(start, vend)
        return start + (vend - start) * (globals.frametime * 12)
    end

    anim.new = function(value,startpos,endpos,condition)
        if condition ~= nil then
            if condition then
                return lerp(value,startpos)
            else
                return lerp(value,endpos)
            end

        else
            return lerp(value,startpos)
        end

    end

    anim.new_color = function(color,color2,end_value,condition)
        if condition ~= nil then
            if condition then
                color.r = lerp(color.r,color2.r)
                color.g = lerp(color.g,color2.g)
                color.b = lerp(color.b,color2.b)
                color.a = lerp(color.a,color2.a)
            else
                color.r = lerp(color.r,end_value.r)
                color.g = lerp(color.g,end_value.g)
                color.b = lerp(color.b,end_value.b)
                color.a = lerp(color.a,end_value.a)
            end
        else
            color.r = lerp(color.r,color2.r)
            color.g = lerp(color.g,color2.g)
            color.b = lerp(color.b,color2.b)
            color.a = lerp(color.a,color2.a)
        end

        return { r = color.r , g = color.g , b = color.b , a = color.a }
    end

    anim.new_flash = function(cur,min,max,target,step,speed)
        local step = step or 1
        local speed = speed or 0.1

        if cur < min + step then
            target = max
        elseif cur > max - step then
            target = min
        end
        
         
        return cur + (target - cur) * speed * (globals.absoluteframetime*10)
    end

    return anim
end)()

local g_indicator = {}
g_indicator = {
    master_condition = 0.0,
    rightmove_condition = 0.0,
    velocity_condition = 0.0,
    dt_condition = 0.0,
    dt_color = {r=0,g=0,b=0,a=0},
    baim_color = {r=0,g=0,b=0,a=0},
    qpeek_color = {r=0,g=0,b=0,a=0},
    spoint_color = {r=0,g=0,b=0,a=0},
    fs_color = {r=0,g=0,b=0,a=0},

    setup = function()
        if not globals.is_connected then return end
        local lp = entity.get_local_player()
        if lp == nil then return end
        if not lp:is_alive() then return end
        local font = pixel
        g_indicator.master_condition = animate.new(g_indicator.master_condition, UI.contains('misc', "Indicators") and 1 or 0)
        local a_m = g_indicator.master_condition

        g_indicator.rightmove_condition = animate.new(g_indicator.rightmove_condition, lp.m_bIsScoped and 1 or 0)

        local add_y = 0
        local fP = math.floor(math.sin(globals.realtime % 3 * 4) * (180 / 2 - 1) + 180 / 2) or 180
        local aW, aX = screen_size.x / 2 + 35 * g_indicator.rightmove_condition, screen_size.y / 2

        render.text(font, vector(aW - 30, aX + 25), color(255, 255, 255, 255 * a_m), nil, "DNXYAW.XYZ")
        render.text(font, vector(aW + 18, aX + 25), color(145, 145, 255, fP * a_m), nil, script_db.username == "Cycle1337" and "DEV" or "BETA")

        render.rect(vector(aW - 29, aX + 37 + add_y), vector(aW - 29 + helpers.get_velocity(lp) / 5.5, aX + 40 + add_y), color(180, 180, 180, 230 * a_m * g_indicator.velocity_condition))
        g_indicator.velocity_condition = animate.new(g_indicator.velocity_condition, helpers.get_velocity(lp) > 10 and 1 or 0)
        add_y = add_y + 7 * g_indicator.velocity_condition

        local ez = math.abs(vars.body_yaw)
        render.text(font, vector(aW - 30, aX + 33 + add_y), color(128, 180, 128, 255 * a_m), nil, (ez > 45 and "BodyYaw+" or (ez > 15 and "FakeYaw" or "Overlap")))
        add_y = add_y + 8

        render.text(font, vector(aW - 30, aX + 33 + add_y), color(230, 230, 230, 255 * a_m), nil, string.upper(vars.p_states_ez[vars.active_i]).." [".. (vars.ez and "L" or "R") .. "]")
        add_y = add_y + 8

        render.text(font, vector(aW - 30, aX + 33 + add_y), color(g_indicator.dt_color.r, g_indicator.dt_color.g, g_indicator.dt_color.b, g_indicator.dt_color.a * a_m * g_indicator.dt_condition), nil, "DT")
        g_indicator.dt_color = animate.new_color(g_indicator.dt_color, {r=0,g=230,b=0,a=255},{r=230,g=0,b=0,a=255}, ref.doubletap.switch:get() and helpers.can_shift_shot(lp))
        g_indicator.dt_condition = animate.new(g_indicator.dt_condition, ref.doubletap.switch:get() and 1 or 0)
        add_y = add_y + 8 * g_indicator.dt_condition

        render.text(font, vector(aW - 30, aX + 33 + add_y), color(g_indicator.baim_color.r, g_indicator.baim_color.g, g_indicator.baim_color.b, g_indicator.baim_color.a * a_m), nil, "BAIM")
        g_indicator.baim_color = animate.new_color(g_indicator.baim_color, {r=230,g=230,b=230,a=255},{r=123,g=123,b=123,a=255}, ref.body_aim.mode:get() == "Force")
        render.text(font, vector(aW - 8, aX + 33 + add_y), color(g_indicator.qpeek_color.r, g_indicator.qpeek_color.g, g_indicator.qpeek_color.b, g_indicator.qpeek_color.a * a_m), nil, "QP")
        g_indicator.qpeek_color = animate.new_color(g_indicator.qpeek_color, {r=230,g=230,b=230,a=255},{r=123,g=123,b=123,a=255}, ref.auto_peek:get())
        render.text(font, vector(aW + 4, aX + 33 + add_y), color(g_indicator.spoint_color.r, g_indicator.spoint_color.g, g_indicator.spoint_color.b, g_indicator.spoint_color.a * a_m), nil, "SP")
        g_indicator.spoint_color = animate.new_color(g_indicator.spoint_color, {r=230,g=230,b=230,a=255},{r=123,g=123,b=123,a=255}, ref.safe_point:get() == "Force")
        render.text(font, vector(aW + 17, aX + 33 + add_y), color(g_indicator.fs_color.r, g_indicator.fs_color.g, g_indicator.fs_color.b, g_indicator.fs_color.a * a_m), nil, "FS")
        g_indicator.fs_color = animate.new_color(g_indicator.fs_color, {r=230,g=230,b=230,a=255},{r=123,g=123,b=123,a=255}, ref.freestanding.switch:get())
    end,
}
events.render:set(g_indicator.setup)

local g_clantag = {}
g_clantag = {
    animation = {
        "<->",
        "<-->",
        "<---->",
        "¿------?",
        "?------¿",
        "best",
        "best",
        "best antiaim:",
        "best antiaim:",
        "d",
        "d2",
        "dn8",
        "dnx%",
        "dnxy0",
        "dnxya^",
        "dnxyawO",
        "dnxyaw.*",
        "dnxyaw.x6",
        "dnxyaw.xy2",
        "dnxyaw.xyz",
        "dnxyaw.xyz",
        "dnxyaw.xyz",
        "dnxyaw.xy2",
        "dnxyaw.x6",
        "dnxyaw.*",
        "dnxyawO",
        "dnxya^",
        "dnxy0",
        "dnx%",
        "dn8",
        "d2",
        "d",
        ""
    },
    vars = {
        remove = false,
        timer = 0
    },
    setup = function()
        local curtime = math.floor(globals.curtime * 2)
    
        if g_clantag.vars.timer ~= curtime then
            common.set_clan_tag(g_clantag.animation[curtime % #g_clantag.animation + 1])
            g_clantag.vars.timer = curtime
        end
    
        g_clantag.vars.remove = true
    end,
    destory = function()
        if g_clantag.vars.remove then
            common.set_clan_tag("")
            g_clantag.vars.remove = false
        end
    end,
}

events.createmove:set(function(c)
    local lp = entity.get_local_player()

    if not lp:is_alive() then return end

    vars.is_holding_space = bit.band(c.buttons, bit.lshift(1, 1)) ~= 0
    vars.lf_value = c.command_number % 3 == 0 and 0 or 1
    vars.ez = vars.body_yaw > 0
    
    if c.choked_commands == 0 then
        vars.body_yaw = (math.floor(math.min(ref.body_yaw.left_limit:get(), lp.m_flPoseParameter[11] * (ref.body_yaw.left_limit:get() * 2) - ref.body_yaw.left_limit:get())))
    end

    if UI.contains('antiaim_options', "Legit Anti-Aim on-use") then
        g_handle_aa.on_use(c)
    end

    if UI.contains('misc', "Leg Fucker") then
        local ef = {[1] = "Sliding", [0] = "Default", [2] = "Walking"}
        ref.leg_movement:set(ef[vars.lf_value])
    end

    if UI.contains('misc', "Clantag") then
        g_clantag.setup()
    else
        g_clantag.destory()
    end

    g_handle_aa.run_active_i()
    g_handle_aa.setup_antiaim()
    g_old_animation.setup()
end)

events.aim_ack:set(function(e)
    local hb = { 
        [0] = 'generic',
        'head', 'chest', 'stomach',
        'left arm', 'right arm',
        'left leg', 'right leg',
        'neck', 'generic', 'gear'
    }

    local name = e.target:get_name()
    local hitgroup_ = hb[e.hitgroup]
    local hitgroup = hb[e.wanted_hitgroup]
    local reason = e.state
    local health = e.target.m_iHealth
    local bt_ms = math.floor(helpers.TICKS_TO_TIME(e.backtrack) * 1000)
    local wanted_dmg_str = e.damage ~= e.wanted_damage and string.format("(%i)", e.wanted_damage) or ""

    if e.state then
        local string = string.format("Missed \aFF0000FF%s\aFFFFFFFF's \aFF0000FF%s \aFFFFFFFF(%i)(%i%%) due to \aFF0000FF%s\aFFFFFFFF, bt= %ims", name, hitgroup,e.wanted_damage,e.hitchance,reason,bt_ms)
        g_notifactions:paint(4, string)
        return
    end

    local string = string.format("Hit \a00FF00FF%s\aFFFFFFFF's in the \a00FF00FF%s \aFFFFFFFFfor \a00FF00FF%i%s \aFFFFFFFF'sdamage (\a00FF00FF%i \aFFFFFFFFhealth remaining), aimed=%s(%i%%) bt= %ims",name, hitgroup_, e.damage, wanted_dmg_str, health, hitgroup, e.hitchance, bt_ms)
    g_notifactions:paint(4, string)
end)

events.shutdown:set(function()

end)
